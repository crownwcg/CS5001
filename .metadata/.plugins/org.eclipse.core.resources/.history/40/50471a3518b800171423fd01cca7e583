package test;

import java.util.*;

public class test {
	
	private class Pair {
		public int i;
		public int j;
		public Pair(int i, int j) {
			this.i = i;
			this.j = j;
		}
	}
	public boolean solution(int[] arr) {
		return fourSum(arr);
	}
	
    public boolean isAnagram(String s, String t) {
        Map<Character, Integer> map  = new HashMap<>();
        Map<Character, Integer> mapt = new HashMap<>();
        
        for (char c : s.toCharArray()) {
            if (map.containsKey(c)) {
                int count = map.get(c);
                map.remove(c);
                map.put(c, count+1);
            } else {
                map.put(c, 1);
            }
        }
        
        for (char c : t.toCharArray()) {
            if (map.containsKey(c)) {
                int count = map.get(c);
                map.remove(c);
                map.put(c, count+1);
            } else {
                map.put(c, 1);
            }
        }
        
        for (char c : s.toCharArray()) {
            if (map.get(c) != mapt.get(c))
                return false;
        }
        
        return true;
    }
	
    public boolean isPowerOfFour(int num) {
        int[] pow4 = new int[16];
        pow4[0] = 1;
        for (int i = 1; i < 16; i++) {
            pow4[i] = pow4[i-1] * 4;
        }
        for (int i = 0; i < 16; i++) {
        		System.out.println("pow["+i+"]: "+pow4[i]);
        }
        return BinarySearch(pow4, num) != -1;
    }
    private int BinarySearch(int[] nums, int target) {
        int lo = 0, hi = nums.length - 1;
        int mid = 0;
        while (lo < hi) {
            mid = lo + (hi - lo) / 2;
            if (nums[mid] < target)      lo = mid + 1;
            else if (nums[mid] > target) hi = mid - 1;
            else return mid;
        }
        return -1;
    }
    
    public String cas(String s) {
        StringBuffer sb = new StringBuffer();
        char[] sc = s.toCharArray();
        int count = 1, i = 1;
        for (; i < sc.length; i++) {
            if (sc[i] == sc[i-1]) {
                count++;
            } else {
                sb.append(Integer.toString(count));
                sb.append(sc[i-1]);
                count = 1;
            }
        }
        sb.append(Integer.toString(count));
        sb.append(sc[--i]);
        return sb.toString();
    }
	// find whether existing a[i]+a[j]=a[m]+a[n] in an array for all i, j, m, n are different
	private boolean fourSum(int[] arr) {
		Map<Integer, Pair> map = new HashMap<>();
		for (int i = 0; i < arr.length; i++) {
			for (int j = i + 1; j < arr.length; j++) {
				int cmp = arr[i] + arr[j];
				if (map.containsKey(cmp)) {
					Pair p = map.get(cmp);
					if ((p.i != i && p.j != j) && (p.i != j && p.j != i))
						return true;
				}
				Pair pair = new Pair(i, j);
				map.put(cmp, pair);
			}
		}
		return false;	
	}
	
    private int starter;
    public boolean isHappy(int n) {
        starter = n;
        int num = 0;
        while (n != 0) {
            num += (n%10)*(n%10);
            n /= 10;
        }
        return isHappyNum(num);
    }
    private boolean isHappyNum(int n) {
        if (n == 1)
            return true;
        if (n == starter)
            return false;
        int num = 0;
        while (n != 0) {
            num += (n%10)*(n%10);
            n /= 10;
        }
        return isHappyNum(num);
    }
    
    public int trailingZeroes(int n) {
    		if (n % 5 != 0)
    			return 0;
        return n/5 + trailingZeroes(n/5);
    }
	
	public static void main(String[] args) {
		int[] arr = {10, 2, 1, 4, 6, 9, 12, 5};
		test t = new test();
		boolean ans_4sum = t.solution(arr);
		System.out.println(ans_4sum);
		int[] arr2 = {2,2,2,2};
		boolean ans_4sum2 = t.solution(arr2);
		System.out.println(ans_4sum2);
		int[] arr3 = {3,1,3};
		boolean ans_4sum3 = t.solution(arr3);
		System.out.println(ans_4sum3);
		System.out.println(t.trailingZeroes(625));
		
		System.out.println(t.cas("21"));
		System.out.println(t.isAnagram("a", "a"));
		System.out.println(t.isPowerOfFour(16));
	}
	
	public static void printArr(int[] arr) {
		for (int i : arr)
			System.out.print(i + ", ");
		System.out.println();
	}
	public static void printSet(Set<int[]> set) {
		for (int[] i : set) {
			for (int j : i) {
				System.out.print(j + ", ");
			}
			System.out.println();
		}
		System.out.println();
	}
	
	public static int[] twoSum(int[] arr, int target) {
		Map<Integer, Integer> map = new HashMap<>();
		for (int i = 0; i < arr.length; i++) {
			int cmp = target - arr[i];
			if (map.containsKey(cmp))
				return new int[] {map.get(cmp), i};
			map.put(arr[i], i);
		}
		return null;
	}
	
	public static int[] threeSum(int[] arr, int target) {
		for (int i = 0; i < arr.length; i++) {
			int cmp = target - arr[i];
			int[] ans = twoSum(arr, cmp);
			if (ans != null)
				return new int[] {ans[0], ans[1], i};
		}
		throw new NoSuchElementException("No answer");
	}
}
